# Default values for pingid-pingfed.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
repositories:
  base: {{ .TemplateBuilder.BaseImagesACR }}
  app: {{ .TemplateBuilder.AppACR }}

image:
  namespace: {{ .TemplateBuilder.ImageNamespace }}
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "{{ .TemplateBuilder.Name }}"


cluster:
  service:
    clusterIP: None
    type: ClusterIP

  ingress:
    enabled: false
    annotations: {}
    hosts: {}
    tls: []

argo:
  enabled: true

imagePullSecrets: {}
nameOverride: ""
fullnameOverride: ""

externalDNS:
  enabled: false
  dnsLabel:  {{ .TemplateBuilder.Name }}.{{ .TemplateBuilder.DnsLabel }}

aadPodIdentity:
  enabled: true
  identity: ""    # defaults to "aib-{{ .TemplateBuilder.Name }}"

loadBalancer:
  internal: true
  #loadBalancerIP: 40.121.183.52
  #dnsLabel: myDns.label

persistentStorage:
  enabled: false
  storageClass: managed-premium  # default, managed-premium, azurefile, azurefile-premium
  name: {{ .TemplateBuilder.Name }}
  reclaimPolicy: Retain
  accessMode: ReadWriteOnce # Only ReadWriteOnce and ReadWriteMany is supported
  mountOptions: # Only used for ReadWriteMany access mode
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - actimeo=30
  skuName: Standard_LRS # Only used for ReadWriteMany access mode 
                        #Standard_LRS - standard locally redundant storage (LRS)
                        #Standard_GRS - standard geo-redundant storage (GRS)
                        #Standard_ZRS - standard zone redundant storage (ZRS)
                        #Standard_RAGRS - standard read-access geo-redundant storage (RA-GRS)
                        #Premium_LRS - premium locally redundant storage (LRS) - minimum value for storage must be 100Gi.
                        #Premium_ZRS - premium zone redundant storage (ZRS)
  storage: 5Gi

podAnnotations: {}

nodeSelector: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
   capabilities:
     drop:
     - ALL
   readOnlyRootFilesystem: false
   runAsNonRoot: true
   runAsUser: 33

service:
  type: LoadBalancer
  ports:
    name: http
    port: 80
    targetPort: http

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: {{ .TemplateBuilder.Name }}.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

csiSecretsProvider:
  enabled: false
  secretProviderClass: ""  # Optional. Defaults to "aib-{{ .TemplateBuilder.Name }}"
  environmentVariables: 
    - ENCRYPT_KEY
    - DB_PASSWORD
  sharedEnvironmentVariables: 
    - SHARED_KEY
    
resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 500m
    memory: 500Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  hpa: 
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 65
    #targetMemoryUtilizationPercentage: 65
  keda:
    enabled: false
    pollingInterval: 15
    cooldownPeriod:  10
    minReplicaCount: 1
    maxReplicaCount: 3    
    triggers:
    - type: cpu
      metadata:
        type: Utilization
        value: "65"            

containers:
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  healthEndpoints:
    enabled: true
    livenessProbe:
      httpGet:
        path: /info
        port: http
    readinessProbe:
      httpGet:
        path: /health
        port: http  
  envFrom:
  - configMapRef:
      name: cfm-{{ .TemplateBuilder.Name }}-environment-variables

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25% 

nodeSelectors: {}

tolerations: {}

affinity: {}

data: 
  CONFIG_SERVER_URL: "https://{{ .TemplateBuilder.ProductFamily }}-configserver.{{ .TemplateBuilder.DnsLabel }}"
  SPRING_PROFILES_ACTIVE: azpilot
  ENCRYPT_KEY: ""     # will be set via CSI Secret Provider
  NEW_RELIC_ENVIRONMENT: "development"
  NEW_RELIC_APP_NAME: "{{ .TemplateBuilder.Name }}"
  NEW_RELIC_LICENSE_KEY: "be76a3f41d2fd918d4ccf327853bf9536d64ed30"
  NEW_RELIC_LOG_FILE_NAME: "STDOUT"

nodePoolAssignments:
  env:                                  #<- this value assigned during CI/CD
  label:  
    key: "gaptech.com/user-nodepool" 
    value:                              #<- this value needs to be overwritten tp specify a specific node pool. This must match what is configured in the ADP Pipeline
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

repositories:
  base: {{ .TemplateBuilder.BaseImagesACR }}
  app: {{ .TemplateBuilder.AppACR }}

image:
  namespace: {{ .TemplateBuilder.ImageNamespace }}
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: {{ .TemplateBuilder.ImageTag }}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

argo:
  enabled: true
 
istio:
  enabled: false
  tetrate:
    enabled: true

aadPodIdentity:
  enabled: true
  identity: ""    # defaults to "aib-{{ .TemplateBuilder.Name }}"

service:
  type: ClusterIP        # Assigned LoadBalancer if ingress.pattern=loadbalancer
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
    - name: https
      protocol: TCP
      port: 443
      targetPort: http 

 
csiSecretsProvider:
  enabled: false
  secretProviderClass: ""  # Optional. Defaults to "aib-{{ .TemplateBuilder.Name }}"
  environmentVariables: 
    - ENCRYPT_KEY
    - DB_PASSWORD
  sharedEnvironmentVariables: 
    - SHARED_KEY
    
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "{{ .TemplateBuilder.Name }}"

podAnnotations: 
  sidecar.istio.io/rewriteAppHTTPProbers: "true"

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
   capabilities:
     drop:
     - ALL
   readOnlyRootFilesystem: false
   runAsNonRoot: true
   runAsUser: 33

resources: 
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: 1
    memory: 2Gi
  requests:
    cpu: 250m
    memory: 500Mi
    
replicaCount: 3 # if autoscaling.pattern: none, this will be selected

autoscaling:
  hpa:
    enabled: true
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 65
    #targetMemoryUtilizationPercentage: 65
  keda:
    enabled: false
    pollingInterval: 15
    cooldownPeriod:  10
    minReplicaCount: 1
    maxReplicaCount: 3    
    triggers:
    - type: cpu
      metadata:
        type: Utilization
        value: "65"            


containers:
  ports:
    - name: http
      containerPort: 8080
      protocol: TCP
  healthEndpoints:
    enabled: true
    livenessProbe:
      httpGet:
        path: /actuator/health
        port: 8080
      initialDelaySeconds: 360
      periodSeconds: 60
    readinessProbe:
      httpGet:
        path: /actuator/health
        port: 8080
      initialDelaySeconds: 360
      periodSeconds: 60
  envFrom:
  - configMapRef:
      name: {{ .TemplateBuilder.Name }}-environment-variables

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25% 

data: 
  #CONFIG_SERVER_URL: "https://none-configserver.aks.dev.azeus.gaptech.com"
  SPRING_PROFILES_ACTIVE: prod
  #ENCRYPT_KEY: ""     # will be set via CSI Secret Provider
  NEW_RELIC_ENVIRONMENT: "production"
  NEW_RELIC_APP_NAME: "{{ .TemplateBuilder.Name }}"
  NEW_RELIC_LICENSE_KEY: "be76a3f41d2fd918d4ccf327853bf9536d64ed30"
  NEW_RELIC_LOG_FILE_NAME: "STDOUT"

nodeSelector: {}

tolerations: []

affinity: {}

nodePoolAssignments:
  env:                                  #<- this value assigned during CI/CD
  label:  
    key: "gaptech.com/user-nodepool" 
    value:                              #<- this value needs to be overwritten tp specify a specific node pool. This must match what is configured in the ADP Pipeline
